import numpy as np
import pandas as pd
import math
import numpy.random as random
import time
start = time.time()

situation = 28  # 情况数（20、24、30）
num = 81  # 车数
I = 30 * 10000  # 循环次数
a = [[0]*13] * num
tt = 120/situation
kkk = 0.8  # 破风系数
jj = 12  # 单局腾空次数
dan = 3  # 单局氮气数
daoju = 13  # 骑士精神单局道具数

a[0] = [208/3.6,  # 平跑速度 0
     258.1/3.6,  # 双喷 1
     203.2/3.6,  # 转向速度 2
     2.84,  # 0-180提速用时 3
     108.45,  # 小喷动力 4
     0.7,  # 小喷时间 5
     0,  # 6
     0,  # 7
     310.3/3.6,  # cww速度 8
     3.12,  # 氮气时间 9
     0,  # 10
     87.68,  # 氮气动力 11
     0]  # 破风 12

a[1] = [201.9/3.6, 244.6/3.6, 192.4/3.6, 3.14, 106.04, 0.71, 0, 0, 309.2/3.6, 3.1, 0, 81.22, 0]   # 裁决者

a[2] = [(201.7+0.4)/3.6, (250+0.4)/3.6, (191.4+0.4)/3.6, 3.28, 106.29+6, 0.8, 0, 0, (309+0.4)/3.6, 3.1, 0, 72.27+6, 0]  # 双生战神

a[3] = [(212.4+1)/3.6, (253.8+1.3)/3.6, (203.4+1)/3.6, 3.01-0.13, 99.07+6.5, 0.69+0.01, 0, 0, (308.1+1.2)/3.6, 3.09+0.02, 0, 73.41+5.4, 0]  # 亚洲荣耀

a[4] = [(205.6+0.2)/3.6, (249.7+0.7)/3.6, (197.0+0.2)/3.6, 3.07-0.12, 101.01+4.8, 0.68+0.01, 0, 0, (307.5+0.7)/3.6, 3.13, 0, 73.80+8, 0]  # 骑士精神普通

a[7] = [(209.6+0.2)/3.6, (253.7+0.7)/3.6, (201.0+0.2)/3.6, 3.07-0.12, 101.01+4.8, 0.68+0.01, 0, 0, (307.5+0.7)/3.6, 3.13, 0, 73.80+8, 0]  # 骑士精神特性

a[5] = [205.9/3.6, 252.5/3.6, 199.2/3.6, 2.93, 109.48, 0.71, 0, 0, 310.1/3.6, 3.1, 0, 85.74, 0]  # 赛博战士普通

a[6] = [205.9/3.6, 259.5/3.6, 199.2/3.6, 2.93, 109.48 + 12.32, 0.71, 0, 0, 310.1/3.6, 3.1, 0, 85.74, 0]  # 赛博战士特性

a[8] = [(203.6+0.6)/3.6, (246.2+1)/3.6, (203.6+0.6)/3.6, 2.66-0.14, 101.48+4.2, 0.67+0.03, 0, 0, (308.9+1.2)/3.6, 3.13, 0, 80.91+4.6, 0]  # 地狱天启

a[9] = [203.4/3.6, 246.3/3.6, 194.9/3.6, 3.24, 124.02, 0.68, 0, 0, 304.2/3.6, 3.24, 0, 90.63, 0]  # 天狼星

a[10] = [202.8/3.6, 248.2/3.6, 198.1/3.6, 3.32, 93.95, 0.64, 0, 0, 300.3/3.6, 3.03, 0, 75.68, 0]  # 零改破风

# a[11] = [209.3/3.6, 260.6/3.6, 203.6/3.6, 2.95, 110.99, 0.79, 0, 0, 307.7/3.6, 3.06, 0, 76.75, 0]  # 星海幻翼
a[11] = [210.3/3.6, 262.4/3.6, 204.6/3.6, 2.90, 111.99, 0.79, 0, 0, 309.2/3.6, 3.06, 0, 76.75, 0]  # 星海幻翼

a[12] = [201.7/3.6, 245.6/3.6, 197.0/3.6, 3.01, 106.13, 0.7, 0, 0, 309.7/3.6, 3.1, 0, 83.57, 0]  # 黑金

a[13] = [204.7/3.6, 248.6/3.6, 200.0/3.6, 3.01 / 1.22, 106.13, 0.7, 0, 0, 309.7/3.6, 3.1, 0, 83.57, 0]  # 黑金特性,22.5%覆盖

a[14] = [201.4/3.6, 245/3.6, 191/3.6, 3.11, 101.77, 0.67, 0, 0, 308.6/3.6, 3.11, 0, 75.89, 0]  # 时之夭

a[15] = [201.7/3.6, 244.8/3.6, 191.8/3.6, 3.18, 106.6, 0.69, 0, 0, 308.8/3.6, 3.12, 0, 77.95, 0]  # 星空猎手,12组空喷、落地喷，平均+0.15s

a[16] = [201.2/3.6, 244.8/3.6, 191.2/3.6, 3.24, 100.88, 0.68, 0, 0, 308.7/3.6, 3.09, 0, 79.67, 0]  # 极夜幽冥

a[17] = [201.3/3.6, 246/3.6, 191.8/3.6, 3.07, 106.32, 0.69, 0, 0, 309.2/3.6, 3.13, 0, 85.27, 0]  # 永夜君主

a[18] = [206.7/3.6, 251.4/3.6, 197.2/3.6, 3.07, 106.32, 0.69, 0, 0, 309.2/3.6, 3.13, 0, 85.27, 0]  # 永夜君主特性

a[19] = [(201.3+1.1)/3.6, (240.8+1.1)/3.6, (191.9+1.1)/3.6, 3.29-0.19, 96.14+3, 0.68+0.02, 0, 0, (310+2.1)/3.6, 3.1+0.01, 0, 78.89+7, 0]  # 迅捷流星

a[20] = [202.8/3.6, 247.3/3.6, 192.9/3.6, 3.09, 113.25, 0.69, 0, 0, 310.4/3.6, 3.1, 0, 85.13, 0]  # 神风玉堂

a[21] = [(200.7+1)/3.6, (245.4+1.1 + 5.6)/3.6, (191.2+1)/3.6, 3.15-0.08, 101.81+5 + 19.71 / 2, 0.69+0.02, 0, 0, (309+1.2)/3.6, 3.1+0.01, 0, 80.56+5, 0]  # 冰皇

a[22] = [199.5/3.6, 249.7/3.6, 190/3.6, 3.17, 111.2, 0.68, 0, 0, 310.9/3.6, 3.1, 0, 81.78, 0]  # 银河之光

a[23] = [201.9/3.6, 246.9/3.6, 192.7/3.6, 3.09, 109.21, 0.7, 0, 0, 310/3.6, 3.08, 0, 81.69, 0]  # 赤魂幽灵

a[24] = [201.9/3.6, 252.9/3.6, 192.7/3.6, 3.09, 109.21 + 30.83, 0.7, 0, 0, 310/3.6, 3.08, 0, 81.69, 0]  # 赤魂幽灵特性

a[25] = [203.6/3.6, 247.8/3.6, 195.1/3.6, 3.05, 108.58, 0.68, 0, 0, 309.1/3.6, 3.11, 0, 83.17, 0]  # 劲霸

a[26] = [208.6/3.6, 252.8/3.6, 200.1/3.6, 3.05, 108.58 + 9.56, 0.68, 0, 0, 309.1/3.6, 3.11, 0, 83.17, 0]  # 劲霸特性

a[27] = [201.3/3.6, 245.2/3.6, 191.3/3.6, 3.17, 102.89, 0.68, 0, 0, 309.2/3.6, 3.1, 0, 82.16, 0]  # 苍穹绝影

a[28] = [201.3/3.6, 245.2/3.6, 191.3/3.6, 3.17, 102.89 + 12.44, 0.68, 0, 0, 309.2/3.6, 3.1, 0, 82.16, 0]   # 苍穹绝影特性

a[29] = [(201.1+0.5)/3.6, (244.6+0.7)/3.6, (191.6+0.5)/3.6, 3.15-0.12, 100.94+4.5, 0.67+0.03, 0, 0, (309.1+1.1)/3.6, 3.09+0.02, 0, 81.33+4.3, 0]  # S-追光者

a[30] = [(201.1+0.5)/3.6, (244.6+0.7)/3.6, (191.6+0.5)/3.6, 3.15-0.12, 100.94+4.5+8.8, 0.67+0.03, 0, 0, (309.1+1.1)/3.6, 3.09+0.02, 0, 81.33+4.3+5, 0]   # S-追光者特性

a[31] = [(200.7+0.5)/3.6, (243.8+1.2)/3.6, (191.2+0.5)/3.6, 3.15-0.2, 101.94+5, 0.69+0.02, 0, 0, (309+1.2)/3.6, 3.08, 0, 81.1+4, 0]  # 惊鸿

a[32] = [(200.7+0.5)/3.6, (243.8+1.2)/3.6, (191.2+0.5)/3.6, 3.15-0.2, 101.94+5+12.59, 0.69+0.02, 0, 0, (309+1.2)/3.6, 3.08, 0, 81.1+4 + 7.39, 0]  # 惊鸿特性

a[33] = [(201.5+0.9)/3.6, (246+1.1)/3.6, (193+0.9)/3.6, 3.21-0.18, 111.18+3, 0.69+0.02, 0, 0, (308.9+1.3)/3.6, 3.08+0.02, 0, 78.89+5.9, 0]  # 天蓬

a[34] = [(202.8+0.7)/3.6, (245.6+0.8)/3.6, (193.4+0.7)/3.6, 3.16-0.15, 101.91+6, 0.68+0.02, 0, 0, (308.7+0.8)/3.6, 3.09+0.01, 0, 83.29+4, 0]  # 火神

a[35] = [(206.3+0.7)/3.6, (249.1+0.8)/3.6, (196.9+0.7)/3.6, 3.16-0.15, 101.91+6, 0.68+0.02, 0, 0, (308.7+0.8)/3.6, 3.09+0.01, 0, 83.29+4, 0]  # 火神特性

a[36] = [202.4/3.6, 244.7/3.6, 192/3.6, 3.03, 103.98, 0.69, 0, 0, 309.9/3.6, 3.12, 0, 80.67, 0]  # 暗耀武神

a[37] = [206.8/3.6, 248.7/3.6, 196/3.6, 3.03, 103.98 + 8.1, 0.69, 0, 0, 309.9/3.6, 3.12, 0, 80.67, 0]  # 暗耀武神特性

a[38] = [200.8/3.6, 244.6/3.6, 192.4/3.6, 3.09, 99.45, 0.69, 0, 0, 309.9/3.6, 4.3, 0, 85.12, 0]  # 逐星者

a[39] = [201.4/3.6, 244.6/3.6, 192/3.6, 3.18, 100.03 + 5.1, 0.69, 0, 0, 308.3/3.6, 3.11, 0, 83.08 + 2.94, 0]  # 天创武士

a[40] = [202.2/3.6, 244.6/3.6, 194.6/3.6, 3.26, 101.94, 0.69, 0, 0, 310.8/3.6, 3.1, 0, 80.89, 0]  # 劳斯莱斯QEX

a[41] = [202.2/3.6, 245/3.6, 192.7/3.6, 3.26, 100.08, 0.68, 0, 0, 308.6/3.6, 3.08, 0, 78.68, 0]  # 尖兵阿尔法

a[42] = [202.2/3.6, 245/3.6, 192.7/3.6, 3.26, 100.08 + 11.44, 0.8, 0, 0, 308.6/3.6, 3.08, 0, 78.68, 0]  # 尖兵阿尔法特性

a[43] = [201.8/3.6, 245.4/3.6, 192.3/3.6, 3.14, 106.5, 0.7, 0, 0, 309.3/3.6, 3.1, 0, 82.39, 0]  # 奔雷圣卫

a[44] = [201.9/3.6, 245.1/3.6, 192.4/3.6, 3.1, 102.03, 0.69, 0, 0, 309.2/3.6, 3.11, 0, 83.84, 0]  # 裂地玄甲

a[45] = [206.9/3.6, 251.1/3.6, 197.4/3.6, 3.1, 102.03 + 10.86, 0.69, 0, 0, 309.2/3.6, 3.11, 0, 83.84, 0]  # 裂地玄甲特性

a[46] = [201.6/3.6, 245.6/3.6, 191.2/3.6, 3.11, 105.41, 0.71, 0, 0, (309.3 + 6.5 * 0.5)/3.6, 3.1, 0, 84.3 + 5.92/2, 0]  # 御炎神兵

a[47] = [183/3.6, 220.6/3.6, 164.2/3.6, 4.2, 87.26, 0.58, 0, 0, 282.6/3.6, 3, 0, 62.47, 0]  # 新手赛车

a[48] = [201.5/3.6, 244.7/3.6, 192.3/3.6, 3.12, 103.95, 0.69 + 0.13, 0, 0, (309.4 + 8.1 * 0.8)/3.6, 3.12, 0, 85.23 * 1.18 * 0.8, 0]  # 智慧女神

a[49] = [201.6/3.6, 246/3.6, 192.1/3.6, 3.16, 105.45, 0.69, 0, 0, 309.2/3.6, 3.1, 0, 80.66, 0]  # 噬天饕餮

a[50] = [202.2/3.6, 244.9/3.6, 192.7/3.6, 3.19, 101.43, 0.69, 0, 0, 309.5/3.6, 3.09, 0, 82.13, 0]  # 黄金射手座

a[51] = [202.2/3.6, 242.8/3.6, 193.2/3.6, 3.18, 95, 0.69, 0, 0, 313/3.6, 3.11, 0, 93.31, 0]  # 天行者

a[52] = [202.8/3.6, 247.5/3.6, 193.4/3.6, 3.2, 100.33, 0.67, 0, 0, 306.4/3.6, 3.08, 0, 72.84, 0]  # 柯星出击1

a[53] = [202.8/3.6, 251.5/3.6, 193.4/3.6, 3.2, 100.33, 0.67, 0, 0, 306.4/3.6, 3.08, 0, 72.84, 0]  # 柯星出击2

a[54] = [212.9/3.6, 264.7/3.6, 204.4/3.6, 2.98, 120.95, 0.74, 0, 0, 329.6/3.6, 3.12, 0, 89.11, 0]  # 源极之星EAX

a[55] = [211.2/3.6, 263.4/3.6, 205.6/3.6, 2.94, 115.01, 0.72, 0, 0, 308.4/3.6, 5.06, 0, 75.95, 0]  # 凯蒂雷诺
# a[55] = [211.4/3.6, 263.6/3.6, 205.8/3.6, 2.94, 116.51, 0.72, 0, 0, 308.6/3.6, 5.06, 0, 75.95, 0]  # 凯蒂雷诺

a[56] = [206.6/3.6, 256.6/3.6, 201.9/3.6, 3.16, 99.96, 0.69, 0, 0, 308/3.6, 3.08, 0, 75, 0]  # 霹雳战驱

a[57] = [202.7/3.6, (245.1+5.5)/3.6, 193.3/3.6, 3.12, 103.02*1.18, 0.69, 0, 0, 310.7/3.6, 3.11, 0, 86, 0]  # 创世噬神

a[58] = [202.7/3.6, 245.1/3.6, 193.3/3.6, 3.12, 103.02, 0.69+0.12, 0, 0, 310.7/3.6, 3.11, 0, 86, 0]  # 创世噬神

a[59] = [203.6/3.6, 247.2/3.6, 194.1/3.6, 3.12, 105.95, 0.71, 0, 0, 312/3.6, 3.09, 0, 80.77, 0]  # 冰魄

a[60] = [200.7/3.6, 245/3.6, 191.3/3.6, 3.08, 103.1, 0.71, 0, 0, 310.3/3.6, 3.1, 0, 87.18, 0]  # 吕布·奉先

a[61] = [205.7/3.6, 250/3.6, 196.3/3.6, 3.08, 103.1*1.18, 0.71, 0, 0, 310.3/3.6, 3.1, 0, 87.18, 0]  # 吕布·奉先

a[62] = [199.5/3.6, 243.6/3.6, 190.2/3.6, 3.1, 103.83, 0.69, 0, 0, 310.2/3.6, 3.1, 0, 85.5, 0]  # 天蜀仙剑

a[63] = [201.8/3.6, 247.2/3.6, 195.2/3.6, 3.18, 105.55, 0.69, 0, 0, 314.6/3.6, 3.11, 0, 79.56*1.16, 0]  # 兰博基尼

a[64] = [201.5/3.6, 245.3/3.6, 191.2/3.6, 3.27, 103.57, 0.69, 0, 0, 311.7/3.6, 3.09, 0, 78.55*1.05, 0]  # 缤纷神驹

a[65] = [200.1/3.6, 245/3.6, 190.7/3.6, 3.28, 98.52, 0.77, 0, 0, (308.1+1.25)/3.6, 3.09, 0, 78.55*1.025, 0]  # 神影
# a[65] = [218/3.6, 270/3.6, 212/3.6, 3.0, 130, 0.77, 0, 0, 340/3.6, 3.2, 0, 110, 0]  # test
# a[65] = [201.6/3.6, 245.9/3.6, 192/3.6, 3.12, 106.03, 0.7, 0, 0, 310/3.6, 3.09, 0, 81.64, 0]   #极地战甲
# a[65] = [202/3.6, 244.9/3.6, 193.5/3.6, 3.2, 105.61, 0.71, 0, 0, 309.7/3.6, 3.17, 0, 85.71, 0]   #蓝影主宰

a[66] = [202.7/3.6, 247.9/3.6, 195.2/3.6, 3.3, 101.98, 0.69, 0, 0, 309.2/3.6, 3.1, 0, 79.29, 0]  # 阿斯拉达

a[67] = [(202.7+5.5)/3.6, (247.9+5.5)/3.6, (195.2+5.5)/3.6, 3.3/1.15, 101.98, 0.69, 0, 0, (309.2+5.5)/3.6, 3.1, 0, 79.29, 0]  # 阿斯拉达特性

a[68] = [211.1/3.6, 264.8/3.6, 202.6/3.6, 2.98, 126.06, 0.74, 0, 0, 326.3/3.6, 3.14, 0, 84.27, 0]  # 序列未来

a[69] = [213.7/3.6, 265.3/3.6, 206.1/3.6, 2.90, 113.86, 0.73, 0, 0, 310.0/3.6, 3.08, 0, 70.98, 0]  # 冰虎

a[70] = [213.7/3.6, 271.3/3.6, 206.1/3.6, 2.90, 113.86*1.12, 0.73, 0, 0, 315.0/3.6, 3.08, 0, 70.98, 0]  # 冰虎

a[71] = [200.6/3.6, 246.2/3.6, 191.3/3.6, 3.12, 106.11, 0.70, 0, 0, 311.0/3.6, 3.11, 0, 90.14, 0]  # 炎君

a[72] = [200.6/3.6, 247.6/3.6, 191.3/3.6, 3.12, 106.11*1.035, 0.82, 0, 0, 311.0/3.6, 3.11, 0, 90.14, 0]  # 炎君

a[73] = [203.8/3.6, 257.2/3.6, 195.3/3.6, 2.82, 114.46*1.09, 0.72, 0, 0, 315.8/3.6, 3.12, 0, 90.36, 0]  # 孙悟空

a[74] = [211.8/3.6, 266.2/3.6, 204.3/3.6, 2.82, 114.46*1.09, 0.81, 0, 0, 324.8/3.6, 3.12, 0, 90.36, 0]  # 孙悟空特性

a[75] = [208.9/3.6, 262.2/3.6, 203.2/3.6, 3.04, 108.1, 0.73, 0, 0, 310.7/3.6, 3.07, 0, 76.32, 0]  # 鸾羽

a[76] = [208.9/3.6, (262.2+9.6)/3.6, 203.2/3.6, 3.04, 108.1*1.18, 0.73*1.18, 0, 0, 310.7/3.6, 3.07, 0, 76.32, 0]  # 鸾羽特性

a[77] = [211.6/3.6, 263.5/3.6, 203.1/3.6, 2.98, 118.87, 0.73, 0, 0, 329.5/3.6, 4.11+1/3, 0, 95.37, 0]  # 奥莉娜

a[78] = [210.2/3.6, 263/3.6, 204.5/3.6, 2.95, 105.68, 0.78, 0, 0, 310.5/3.6, 3.05, 0, 74.56, 0]  # 玉兔雷诺

a[79] = [208.7/3.6, (258.3/1.5+265.3/3)/3.6, 200.2/3.6, 3.12, (105.69/1.5+115.71/3), 0.84, 0, 0, 317.1/3.6, 3.11, 0, 82.67, 0]  # 玄月

a[80] = [(212.8+(7*0.15))/3.6, (265.9+(7*0.15))/3.6, (205.2+(7*0.15))/3.6, 3.02, 113.12*(1+0.12*0.15), 0.77, 0, 0, (311.7+(7*0.15))/3.6, 3.1, 0, 74.39, 0]  # L-白狼

print(a[55])
print(a[78])
print(a[80])


for i in range(0, num):
    a[i][6] = 50 ** 2 / (2 * a[i][3])   # 平跑单位质量功率
    a[i][7] = (a[i][4] + 3.2/a[i][3]*20) / 3.6  # 小喷复合加速度
    a[i][10] = a[i][8] - (a[i][1] - a[i][0]) * 0.8  # 氮气最高速
    a[i][12] = ((a[i][10]-a[i][0]) / ((a[i][4] + a[i][11]) / 3.6) * (a[i][10]-a[i][0]) / 2)  # 单个氮气扣除数

a[19][8] = a[19][8] - (a[19][1] - a[19][0]) * 0.3
a[19][12] = ((a[19][8]-a[19][0]) / ((a[19][4] + a[19][11]) / 3.6) * (a[19][8]-a[19][0]) / 2)  # 迅捷流星比较特别,c = cww

a[51][8] = a[51][8] - (a[51][1] - a[51][0]) * 0.3
a[51][12] = ((a[51][8]-a[51][0]) / ((a[51][4] + a[51][11]) / 3.6) * (a[51][8]-a[51][0]) / 2)  # 迅捷流星比较特别,c = cww

a[43][10] = a[43][8] - (a[43][1] - a[43][0]) * 0.6  # 奔雷圣卫特性 wcw=cww
a[43][12] = ((a[43][10]-a[43][0]) / ((a[43][4] + a[43][11]) / 3.6) * (a[43][10]-a[43][0]) / 2)

# print(a)

def single_loop():
    global num, situation
    s = [0] * num  # 初始值
    for i in (55, 79, 80):
        k = 0  # 触发次数k
        t = 0
        c = 0  # 赛博导弹触发条件
        xx = 0  # 迅捷流星触发条件
        ppp = 1  # 平跑加速百分比
        m = [0]*2
        global a, tt, jj

        # 动力剩余：① 0-120:2.35；②：50-140:1.83；③：50-160/180：1.5；④：120-250:0.3。

        # 起步
        t01 = (120 / 3.6) / (a[i][7] + 2.35 * 3.2 / a[i][3] * 20 / 3.6)  # 小喷到120km/h
        s01 = 1 / 2 * (120 / 3.6) * t01
        s[i] += s01

        t02 = 0.5  # 双喷准备段
        s02 = t02 * 120 / 3.6
        s[i] += s02

        t03 = (a[i][1] - 120 / 3.6) / (a[i][7] + 0.3 * 3.2 / a[i][3] * 20 / 3.6)
        s03 = (120 / 3.6 + a[i][1]) * t03 / 2
        s[i] += s03

        t04 = a[i][5] * 2 - t03
        s04 = a[i][1] * t04
        s[i] += s04

        t05 = tt - t01 - t02 - t03 - t04  # 平跑段
        s05 = a[i][0] * t05
        s[i] += s05

        for x in range(1, situation):
            ss = random.random() * 1.2
            pp = random.random()

            if ss < 0.156:
                c += 1

            if ss < 0.085:  # 雷
                t111 = (45 / 3.6) ** 2 / (2 * a[i][6])  # 0-45平跑时间
                t112 = (120 / 3.6) ** 2 / (2 * a[i][6])  # 0-120平跑时间
                t11 = t112 - t111
                s111 = 2 / 3 * np.sqrt(2 * a[i][6] * (t111 ** 3))  # 0-45平跑距离
                s112 = 2 / 3 * np.sqrt(2 * a[i][6] * (t112 ** 3))  # 0-120平跑距离
                s[i] += (s112 - s111)

                t12 = 0.5  # 双喷准备段
                s12 = t12 * 120 / 3.6
                s[i] += s12

                t13 = (a[i][1] - 120 / 3.6) / (a[i][7] + 0.3 * 3.2 / a[i][3] * 20 / 3.6)
                s13 = (120 / 3.6 + a[i][1]) * t13 / 2
                s[i] += s13

                t14 = a[i][5] * 2 - t13
                s14 = a[i][1] * t14
                s[i] += s14

                t15 = tt - t11 - t12 - t13 - t14
                s15 = a[i][0] * t15
                s[i] += s15

                xx += 1
                sss = random.random()
                if sss < 0.65:
                    m[0] += 5

            if 0.085 < ss < 0.205:  # 导弹

                if pp > ppp:

                    t20 = 1.2  # 腾空段

                    t21 = (140 / 3.6 - 50 / 3.6) / (a[i][7] + 1.83 * 3.2 / a[i][3] * 20 / 3.6)  # 落地喷加速到140
                    s21 = 1 / 2 * (140 / 3.6 + 50 / 3.6) * t21
                    s[i] += s21

                    t22 = 0.5  # 双喷准备段
                    s22 = t22 * 120 / 3.6
                    s[i] += s22

                    t23 = (a[i][1] - 120 / 3.6) / (a[i][7] + 0.3 * 3.2 / a[i][3] * 20 / 3.6)   # 双喷加速度段
                    s23 = (120 / 3.6 + a[i][1]) * t23 / 2
                    s[i] += s23

                    t24 = a[i][5] * 2 - t23    # 双喷最高端
                    s24 = a[i][1] * t24
                    s[i] += s24

                    t25 = tt - t20 - t21 - t22 - t23 - t24  # 平跑段
                    s25 = a[i][0] * t25
                    s[i] += s25

                else:

                    t20 = 1.2  # 腾空段

                    t21 = a[i][5]  # 落地喷加速到最高
                    s21 = 50 / 3.6 * t21 + 1 / 2 * (a[i][7] + 1.5 * 3.2 / a[i][3] * 20 / 3.6) * (t21 ** 2)
                    v21 = 50 / 3.6 + (a[i][7] + 1.5 * 3.2 / a[i][3] * 20 / 3.6) * t21
                    s[i] += s21

                    t221 = np.square(a[i][0]) / (2 * a[i][6])  # 0平跑到最高速时间
                    t222 = np.square(v21) / (2 * a[i][6])  # 0-v21时间
                    t22 = t221 - t222
                    s22 = 2 / 3 * np.sqrt(2 * a[i][6] * (t221 ** 3)) - 2 / 3 * np.sqrt(2 * a[i][6] * (t222 ** 3))
                    s[i] += s22

                    t25 = tt - t20 - t21 - t22  # 平跑段
                    s25 = a[i][0] * t25
                    s[i] += s25

                sss = random.random()
                m[1] += 1

                if sss < 0.65:
                    m[0] += 4


            if 0.205 < ss < 0.323:  # 酷比

                if pp > ppp:

                    t30 = 0.6  # 腾空段

                    t31 = (140 / 3.6 - 50 / 3.6) / (a[i][7] + 1.83 * 3.2 / a[i][3] * 20 / 3.6)  # 落地喷加速到140
                    s31 = 1 / 2 * (140 / 3.6 + 50 / 3.6) * t31
                    s[i] += s31

                    t32 = 0.5  # 双喷准备段
                    s32 = t32 * 120 / 3.6
                    s[i] += s32

                    t33 = (a[i][1] - 120 / 3.6) / (a[i][7] + 0.3 * 3.2 / a[i][3] * 20 / 3.6)
                    s33 = (120 / 3.6 + a[i][1]) * t33 / 2
                    s[i] += s33

                    t34 = a[i][5] * 2 - t33
                    s34 = a[i][1] * t34
                    s[i] += s34

                    t35 = tt - t30 - t31 - t32 - t33 - t34  # 平跑段
                    s35 = a[i][0] * t35
                    s[i] += s35

                else:

                    t30 = 0.6  # 腾空段

                    t31 = a[i][5]  # 落地喷加速到最高
                    s31 = 50 / 3.6 * t31 + 1 / 2 * (a[i][7] + 1.5 * 3.2 / a[i][3] * 20 / 3.6) * (t31 ** 2)
                    v31 = 50 / 3.6 + (a[i][7] + 1.5 * 3.2 / a[i][3] * 20 / 3.6) * t31
                    s[i] += s31

                    t321 = np.square(a[i][0]) / (2 * a[i][6])  # 0平跑到最高速时间
                    t322 = np.square(v31) / (2 * a[i][6])  # v21平跑到最高速时间
                    t32 = t321 - t322
                    s32 = 2 / 3 * np.sqrt(2 * a[i][6] * (t321 ** 3)) - 2 / 3 * np.sqrt(2 * a[i][6] * (t322 ** 3))
                    s[i] += s32

                    t35 = tt - t30 - t31 - t32  # 平跑段
                    s35 = a[i][0] * t35
                    s[i] += s35

                m[1] += 1
                xx += 1

            if 0.323 < ss < 0.41:  # 龙卷风

                if pp > ppp:

                    t40 = 1.5  # 腾空段

                    t41 = (140 / 3.6 - 50 / 3.6) / (a[i][7] + 1.83 * 3.2 / a[i][3] * 20 / 3.6)  # 落地喷加速到140
                    s41 = 1 / 2 * (140 / 3.6 + 50 / 3.6) * t41
                    s[i] += s41

                    t42 = 0.5  # 双喷准备段
                    s42 = t42 * 120 / 3.6
                    s[i] += s42

                    t43 = (a[i][1] - 120 / 3.6) / (a[i][7] + 0.3 * 3.2 / a[i][3] * 20 / 3.6)
                    s43 = (120 / 3.6 + a[i][1]) * t43 / 2
                    s[i] += s43

                    t44 = a[i][5] * 2 - t43
                    s44 = a[i][1] * t44
                    s[i] += s44

                    t45 = tt - t40 - t41 - t42 - t43 - t44  # 平跑段
                    s45 = a[i][0] * t45
                    s[i] += s45

                else:

                    t40 = 1.5  # 腾空段

                    t41 = a[i][5]  # 落地喷加速到最高
                    s41 = 50 / 3.6 * t41 + 1 / 2 * (a[i][7] + 1.5 * 3.2 / a[i][3] * 20 / 3.6) * (t41 ** 2)
                    v41 = 50 / 3.6 + (a[i][7] + 1.5 * 3.2 / a[i][3] * 20 / 3.6) * t41
                    s[i] += s41

                    t421 = np.square(a[i][0]) / (2 * a[i][6])  # 0平跑到最高速时间
                    t422 = np.square(v41) / (2 * a[i][6])  # v21平跑到最高速时间
                    t42 = t421 - t422
                    s42 = 2 / 3 * np.sqrt(2 * a[i][6] * (t421 ** 3)) - 2 / 3 * np.sqrt(2 * a[i][6] * (t422 ** 3))
                    s[i] += s42

                    t45 = tt - t40 - t41 - t42  # 平跑段
                    s45 = a[i][0] * t45
                    s[i] += s45

                m[1] += 1

            if 0.41 < ss < 0.5:   # 磁铁，动力、速度85%，3.5s

                s[i] += a[i][0] * 0.85 * 3.5
                s[i] += a[i][0] * (tt - 3.5)
                xx += 1
                sss = random.random()
                if sss < 0.65:
                    m[0] += 5

            if ss > 0.5:  # 漂移1s过弯，均速120km/h，然后双喷

                t61 = 1  # 过弯时间
                s61 = t61 * 120 / 3.6
                s[i] += s61

                t62 = (a[i][1] - 120 / 3.6) / (a[i][7] + 0.3 * 3.2 / a[i][3] * 20 / 3.6)
                s62 = (120 / 3.6 + a[i][1]) * t62 / 2
                s[i] += s62

                t63 = a[i][5] * 2 - t62
                s63 = a[i][1] * t63
                s[i] += s63

                t64 = tt - t61 - t62 - t63  # 平跑段
                s64 = a[i][0] * t64
                s[i] += s64

        s[i] += (1.25 * a[i][5] + 0.3) * jj * (a[i][1] - a[i][0])  # 腾空喷加速

        s[i] += (- jj * (a[i][1] - a[i][0]) / a[i][7] * (a[i][1] - a[i][0]) / 2)    # 腾空喷加速扣除数

        s[i] += (a[i][2] - a[i][0]) / 3.6 * 4  # 平跑转向扣除数

        if i == 15:  # 星空猎手
            s[i] += (1.25 * 0.12) * jj * (a[i][1] - a[i][0])

        if i == 16:  # 极夜幽冥
            s[i] += (1.25 * 0.1) * jj * (a[i][1] - a[i][0])

        if i == 62:  # 天蜀仙剑
            s[i] += (1.25 * 0.12) * jj * (a[i][1] - a[i][0])


    return s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7], s[8], s[9], s[10], s[11], s[12], s[13], s[14], s[15], s[16], \
           s[17], s[18], s[19], s[20], s[21], s[22], s[23], s[24], s[25], s[26], s[27], s[28], s[29], s[30], s[31], s[32], \
           s[33], s[34], s[35], s[36], s[37], s[38], s[39], s[40], s[41], s[42], s[43], s[44], s[45], s[46], s[47], s[48], \
           s[49], s[50], s[51], s[52], s[53], s[54], s[55], s[56], s[57], s[58], s[59], s[60], s[61], s[62], s[63], s[64], \
           s[65], s[66], s[67], s[68], s[69], s[70], s[71], s[72], s[73], s[74], s[75], s[76], s[77], s[78], s[79], s[80], m[0], m[1], math.floor(c/4), math.floor(xx/4)

Pofeng = [0]*9
Caijuezhe = [0]*9
Shuangsheng = [0]*9
Yazhou = [0]*9
Qishi = [0]*9
Saibo = [0]*9
Diyutianqi = [0]*9
Tianlang = [0]*9
Pofeng0 = [0]*9
Huangbai = [0]*9
Heijin = [0]*9
Shizhiyao = [0]*9
Xingkong = [0]*9
Jiye = [0]*9
Yongye = [0]*9
Xunjie = [0]*9
Shenfeng = [0]*9
Binghuang = [0]*9
Yinghe = [0]*9
Chihun = [0]*9
Jingba = [0]*9
Cangqiong = [0]*9
Zhuiguang = [0]*9
Jinghong = [0]*9
Tianpeng = [0]*9
Huoshen = [0]*9
Anyao = [0]*9
Zhuxing = [0]*9
Tianchuang = [0]*9
Laosi = [0]*9
Jianbing = [0]*9
Benlei = [0]*9
Liedi = [0]*9
Yuyan = [0]*9
Xinshou = [0]*9
zhihui = [0]*9
shitian = [0]*9
huangjin = [0]*9
tianxing = [0]*9
kexing = [0]*9
yuanji = [0]*9
kaidi = [0]*9
pili = [0]*9
chuangshi = [0]*9
bingpo = [0]*9
fengxian = [0]*9
xianjian = [0]*9
lanbo = [0]*9
binfen = [0]*9
shenying = [0]*9
ala = [0]*9
xulie = [0]*9
binghu = [0]*9
yanjun = [0]*9
sunwukong = [0]*9
luanyu = [0]*9
aolina = [0]*9
yutu = [0]*9
xuanyue = [0]*9
bailang = [0]*9

S0 = 0
S1 = 0
S2 = 0
S3 = 0
S4 = 0
S5 = 0
S6 = 0
S7 = 0
S8 = 0
S9 = 0
S10 = 0
S11 = 0
S12 = 0
S13 = 0
S14 = 0
S15 = 0
S16 = 0
S17 = 0
S18 = 0
S19 = 0
S20 = 0
S21 = 0
S22 = 0
S23 = 0
S24 = 0
S25 = 0
S26 = 0
S27 = 0
S28 = 0
S29 = 0
S30 = 0
S31 = 0
S32 = 0
S33 = 0
S34 = 0
S35 = 0
S36 = 0
S37 = 0
S38 = 0
S39 = 0
S40 = 0
S41 = 0
S42 = 0
S43 = 0
S44 = 0
S45 = 0
S46 = 0
S47 = 0
S48 = 0
S49 = 0
S50 = 0
S51 = 0
S52 = 0
S53 = 0
S54 = 0
S55 = 0
S56 = 0
S57 = 0
S58 = 0
S59 = 0
S60 = 0
S61 = 0
S62 = 0
S63 = 0
S64 = 0
S65 = 0
S66 = 0
S67 = 0
S68 = 0
S69 = 0
S70 = 0
S71 = 0
S72 = 0
S73 = 0
S74 = 0
S75 = 0
S76 = 0
S77 = 0
S78 = 0
S79 = 0
S80 = 0
M0 = 0
M1 = 0
C = 0
X = 0

for ix in range(1, I+1):
    s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, \
    s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, \
    s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, \
    s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, \
    s78, s79, s80, m0, m1, c, xx = single_loop()
    S0 += s0
    S1 += s1
    S2 += s2
    S3 += s3
    S4 += s4
    S5 += s5
    S6 += s6
    S7 += s7
    S8 += s8
    S9 += s9
    S10 += s10
    S11 += s11
    S12 += s12
    S13 += s13
    S14 += s14
    S15 += s15
    S16 += s16
    S17 += s17
    S18 += s18
    S19 += s19
    S20 += s20
    S21 += s21
    S22 += s22
    S23 += s23
    S24 += s24
    S25 += s25
    S26 += s26
    S27 += s27
    S28 += s28
    S29 += s29
    S30 += s30
    S31 += s31
    S32 += s32
    S33 += s33
    S34 += s34
    S35 += s35
    S36 += s36
    S37 += s37
    S38 += s38
    S39 += s39
    S40 += s40
    S41 += s41
    S42 += s42
    S43 += s43
    S44 += s44
    S45 += s45
    S46 += s46
    S47 += s47
    S48 += s48
    S49 += s49
    S50 += s50
    S51 += s51
    S52 += s52
    S53 += s53
    S54 += s54
    S55 += s55
    S56 += s56
    S57 += s57
    S58 += s58
    S59 += s59
    S60 += s60
    S61 += s61
    S62 += s62
    S63 += s63
    S64 += s64
    S65 += s65
    S66 += s66
    S67 += s67
    S68 += s68
    S69 += s69
    S70 += s70
    S71 += s71
    S72 += s72
    S73 += s73
    S74 += s74
    S75 += s75
    S76 += s76
    S77 += s77
    S78 += s78
    S79 += s79
    S80 += s80
    M0 += m0
    M1 += m1
    C += c  # 导弹数
    X += xx  # 迅捷流星触发数


Pofeng[0] = round(S0 / I + dan * (a[0][10]-a[0][0]) * a[0][9] - dan * a[0][12], 0)
Pofeng[1] = round(M0 / I * kkk, 1)
Pofeng[2] = round(M0 / I * (a[0][1] - a[0][0]) * a[0][5] * kkk, 1)
Pofeng[7] = round(dan * (a[0][10]-a[0][0]) * a[0][9] - dan * a[0][12], 1)
Pofeng[8] = round(S0 / I + M0 / I * (a[0][1] - a[0][0]) * a[0][5] * kkk + dan * (a[0][10]-a[0][0]) * a[0][9] - dan * a[0][12], 0)

Caijuezhe[0] = round(S1 / I + dan * (a[1][10]-a[1][0]) * a[1][9] - dan * a[1][12], 0)
Caijuezhe[1] = round(M1 / I + 8, 1)
Caijuezhe[2] = round((M1 / I + 8) * (a[1][1] - a[1][0]) * a[1][5], 1)
Caijuezhe[7] = round(dan * (a[1][10]-a[1][0]) * a[1][9] - dan * a[1][12], 1)
Caijuezhe[8] = round(S1 / I + (M1 / I + 8) * (a[1][1] - a[1][0]) * a[1][5] + dan * (a[1][10]-a[1][0]) * a[1][9] - dan * a[1][12], 0)

Shuangsheng[0] = round(S2 / I + dan * (a[2][10]-a[2][0]) * a[2][9] - dan * a[2][12], 0)
Shuangsheng[7] = round(dan * (a[2][10]-a[2][0]) * a[2][9] - dan * a[2][12], 1)
Shuangsheng[8] = Shuangsheng[0]

Yazhou[0] = round(S3 / I + dan * (a[3][10]-a[3][0]) * a[3][9] - dan * a[3][12], 0)
Yazhou[7] = round(dan * (a[3][10]-a[3][0]) * a[3][9] - dan * a[3][12], 1)
Yazhou[8] = Yazhou[0]

Qishi[0] = round((1-daoju*0.47*7/120) * (S4 / I + dan * (a[4][10]-a[4][0]) * a[4][9] - dan * a[4][12]) + daoju*0.47*7/120 * (S7 / I + dan * (a[7][10]-a[7][0]) * a[7][9] - dan * a[7][12]), 0)
Qishi[1] = round(daoju * 0.47, 1)
Qishi[2] = round(daoju * 0.47 * (a[4][1] - a[4][0]) * a[4][5], 1)
Qishi[7] = round((1-daoju*0.47*7/120) * (dan * (a[4][10]-a[4][0]) * a[4][9] - dan * a[4][12]) + daoju*0.47*7/120 * (dan * (a[7][10]-a[7][0]) * a[7][9] - dan * a[7][12]), 1)
Qishi[8] = round((1-daoju*0.47*7/120) * (S4 / I + dan * (a[4][10]-a[4][0]) * a[4][9] - dan * a[4][12]) + daoju*0.47*7/120 * (S7 / I + dan * (a[7][10]-a[7][0]) * a[7][9] - dan * a[7][12]) + daoju * 0.47 * (a[4][1] - a[4][0]) * a[4][5], 0)

Saibo[0] = round((1 - C/I*15/120) * (S5 / I + dan * (a[5][10]-a[5][0]) * a[5][9] - dan * a[5][12]) + C/I*15/120 * (S6 / I + dan * (a[6][10]-a[6][0]) * a[6][9] - dan * a[6][12]), 0)
Saibo[3] = round(C/I * 0.8, 2)
Saibo[4] = round(C/I * 0.8 * 1.2 * 57, 1)
Saibo[7] = round((1 - C/I*15/120) * (dan * (a[5][10]-a[5][0]) * a[5][9] - dan * a[5][12]) + C/I*15/120 * (dan * (a[6][10]-a[6][0]) * a[6][9] - dan * a[6][12]), 1)
Saibo[8] = round((1 - C/I*15/120) * (S5 / I + dan * (a[5][10]-a[5][0]) * a[5][9] - dan * a[5][12]) + C/I*15/120 * (S6 / I + dan * (a[6][10]-a[6][0]) * a[6][9] - dan * a[6][12]) + C/I * 0.8 * 1.2 * 57, 0)

Diyutianqi[0] = round(S8 / I + dan * (a[8][10]-a[8][0]) * a[8][9] - dan * a[8][12], 0)
Diyutianqi[7] = round(dan * (a[8][10]-a[8][0]) * a[8][9] - dan * a[8][12], 1)
Diyutianqi[8] = Diyutianqi[0]

Tianlang[0] = round(S9 / I + dan * (a[9][10]-a[9][0]) * a[9][9] - dan * a[9][12], 0)
Tianlang[7] = round(dan * (a[9][10]-a[9][0]) * a[9][9] - dan * a[9][12], 1)
Tianlang[8] = Tianlang[0]

Pofeng0[0] = round(S10 / I + dan * (a[10][10]-a[10][0]) * a[10][9] - dan * a[10][12], 0)
Pofeng0[1] = round(M0 / I * kkk, 1)
Pofeng0[2] = round(M0 / I * (a[10][1] - a[10][0]) * a[10][5] * kkk, 1)
Pofeng0[7] = round(dan * (a[10][10]-a[10][0]) * a[10][9] - dan * a[10][12], 1)
Pofeng0[8] = round(S10 / I + dan * (a[10][10]-a[10][0]) * a[10][9] - dan * a[10][12] + M0 / I * (a[10][1] - a[10][0]) * a[10][5] * kkk, 0)

Huangbai[0] = round(S11 / I + dan * (a[11][10]-a[11][0]) * a[11][9] - dan * a[11][12], 0)
Huangbai[7] = round(dan * (a[11][10]-a[11][0]) * a[11][9] - dan * a[11][12], 1)
Huangbai[8] = Huangbai[0]

Heijin[0] = round((1 - situation / 2 * 0.34 * 6 / 120) * (S12 / I + dan * (a[12][10]-a[12][0]) * a[12][9] - dan * a[12][12]) + situation / 2 * 0.34 * 6 / 120 * (S13 / I + dan * (a[13][10]-a[13][0]) * a[13][9] - dan * a[13][12]), 0)
Heijin[7] = round((1 - situation / 2 * 0.34 * 6 / 120) * (dan * (a[12][10]-a[12][0]) * a[12][9] - dan * a[12][12]) + situation / 2 * 0.34 * 6 / 120 * (dan * (a[13][10]-a[13][0]) * a[13][9] - dan * a[13][12]), 1)
Heijin[8] = Heijin[0]

Shizhiyao[0] = round(S14 / I + dan * (a[14][10]-a[14][0]) * a[14][9] - dan * a[14][12], 0)
Shizhiyao[7] = round(dan * (a[14][10]-a[14][0]) * a[14][9] - dan * a[14][12], 1)
Shizhiyao[8] = Shizhiyao[0]

Xingkong[0] = round(S15 / I + math.floor((situation * 1.65 + jj * 2) / 9) * 5 * 5 / 3.6 + dan * (a[15][10]-a[15][0]) * a[15][9] - dan * a[15][12] + situation * (0.41 - 0.085) / 1.2 * 0.12 * (a[15][1] - a[15][0]), 0)
Xingkong[7] = round(dan * (a[15][10]-a[15][0]) * a[15][9] - dan * a[15][12], 1)
Xingkong[8] = Xingkong[0]

Jiye[0] = round(S16 / I + (jj + situation * (0.41 - 0.085) / 1.2 * 0.5) * 0.65 * 5 * 5.5 / 3.6 + dan * (a[16][10]-a[16][0]) * a[16][9] - dan * a[16][12] + situation * (0.41 - 0.085) / 1.2 * 0.1 * (a[16][1] - a[16][0]), 0)
Jiye[7] = round(dan * (a[16][10]-a[16][0]) * a[16][9] - dan * a[16][12], 1)
Jiye[8] = Jiye[0]

Yongye[0] = round((S17 / I + dan * (a[17][10]-a[17][0]) * a[17][9] - dan * a[17][12])/8 + (S18 / I + dan * (a[18][10]-a[18][0]) * a[18][9] - dan * a[18][12])*7/8, 0)
Yongye[7] = round((dan * (a[17][10]-a[17][0]) * a[17][9] - dan * a[17][12])/8 + (dan * (a[18][10]-a[18][0]) * a[18][9] - dan * a[18][12])*7/8, 1)
Yongye[8] = Yongye[0]

Xunjie[0] = round(S19 / I + dan * (a[19][8]-a[19][0]) * a[19][9] - dan * a[19][12], 0)
Xunjie[5] = round(X/I * 0.8, 2)
Xunjie[6] = round(X/I * 0.8 * (a[19][9] * (a[19][8] - a[19][0])), 2)
Xunjie[7] = round(dan * (a[19][8]-a[19][0]) * a[19][9] - dan * a[19][12], 1)
Xunjie[8] = round(S19 / I + dan * (a[19][8]-a[19][0]) * a[19][9] - dan * a[19][12] + X/I * 0.8 * (a[19][9] * (a[19][8] - a[19][0])), 0)

Shenfeng[0] = round(S20 / I + dan * (a[20][10]-a[20][0]) * a[20][9] - dan * a[20][12], 0)
Shenfeng[5] = round(1, 2)
Shenfeng[6] = round(1 * (a[20][9] * (a[20][10] - a[20][0])), 2)
Shenfeng[7] = round(dan * (a[20][10]-a[20][0]) * a[20][9] - dan * a[20][12], 1)
Shenfeng[8] = round(S20 / I + dan * (a[20][10]-a[20][0]) * a[20][9] - dan * a[20][12] + 1 * (a[20][9] * (a[20][10] - a[20][0])), 0)

Binghuang[0] = round(S21 / I + dan * (a[21][10]-a[21][0]) * a[21][9] - dan * a[21][12], 0)
Binghuang[7] = round(dan * (a[21][10]-a[21][0]) * a[21][9] - dan * a[21][12], 1)
Binghuang[8] = Binghuang[0]

Yinghe[0] = round(S22 / I + dan * (a[22][10]-a[22][0]) * a[22][9] - dan * a[22][12], 0)
Yinghe[7] = round(dan * (a[22][10]-a[22][0]) * a[22][9] - dan * a[22][12], 1)
Yinghe[8] = Yinghe[0]

Chihun[0] = round((S23 / I + dan * (a[23][10]-a[23][0]) * a[23][9] - dan * a[23][12])*0.3 + (S24 / I + dan * (a[24][10]-a[24][0]) * a[24][9] - dan * a[24][12])*0.7, 0)
Chihun[7] = round((dan * (a[23][10]-a[23][0]) * a[23][9] - dan * a[23][12])*0.3 + (dan * (a[24][10]-a[24][0]) * a[24][9] - dan * a[24][12])*0.7, 1)
Chihun[8] = Chihun[0]

Jingba[0] = round((S25 / I + dan * (a[25][10]-a[25][0]) * a[25][9] - dan * a[25][12])*0.35 + (S26 / I + dan * (a[26][10]-a[26][0]) * a[26][9] - dan * a[26][12])*0.65, 0)
Jingba[7] = round((dan * (a[25][10]-a[25][0]) * a[25][9] - dan * a[25][12])*0.35 + (dan * (a[26][10]-a[26][0]) * a[26][9] - dan * a[26][12])*0.65, 1)
Jingba[8] = Jingba[0]

Cangqiong[0] = round((S27 / I + dan * (a[27][10]-a[27][0]) * a[27][9] - dan * a[27][12])*0.55 + (S28 / I + dan * (a[28][10]-a[28][0]) * a[28][9] - dan * a[28][12])*0.45, 0)
Cangqiong[7] = round((dan * (a[27][10]-a[27][0]) * a[27][9] - dan * a[27][12])*0.55 + (dan * (a[28][10]-a[28][0]) * a[28][9] - dan * a[28][12])*0.45, 1)
Cangqiong[8] = Cangqiong[0]

Zhuiguang[0] = round((S29 / I + dan * (a[29][10]-a[29][0]) * a[29][9] - dan * a[29][12])*0.65 + (S30 / I + dan * (a[30][10]-a[30][0]) * a[30][9] - dan * a[30][12])*0.35, 0)
Zhuiguang[7] = round((dan * (a[29][10]-a[29][0]) * a[29][9] - dan * a[29][12])*0.65 + (dan * (a[30][10]-a[30][0]) * a[30][9] - dan * a[30][12])*0.35, 1)
Zhuiguang[8] = Zhuiguang[0]

Jinghong[0] = round((S31 / I + dan * (a[31][10]-a[31][0]) * a[31][9] - dan * a[31][12])*0.71 + (S32 / I + dan * (a[32][10]-a[32][0]) * a[32][9] - dan * a[32][12])*0.29, 0)
Jinghong[7] = round((dan * (a[31][10]-a[31][0]) * a[31][9] - dan * a[31][12])*0.71 + (dan * (a[32][10]-a[32][0]) * a[32][9] - dan * a[32][12])*0.29, 1)
Jinghong[8] = Jinghong[0]

Tianpeng[0] = round(S33 / I + dan * (a[33][10]-a[33][0]) * a[33][9] - dan * a[33][12], 0)
Tianpeng[7] = round(dan * (a[33][10]-a[33][0]) * a[33][9] - dan * a[33][12], 1)
Tianpeng[8] = Tianpeng[0]

Huoshen[0] = round((S34 / I + dan * (a[34][10]-a[34][0]) * a[34][9] - dan * a[34][12])*0.75 + (S35 / I + dan * (a[35][10]-a[35][0]) * a[35][9] - dan * a[35][12])*0.25, 0)
Huoshen[5] = round(1, 2)
Huoshen[6] = round(1 * (a[34][9] * (a[34][10] - a[34][0])), 2)
Huoshen[7] = round((dan * (a[34][10]-a[34][0]) * a[34][9] - dan * a[34][12])*0.75 + (dan * (a[35][10]-a[35][0]) * a[35][9] - dan * a[35][12])*0.25, 1)
Huoshen[8] = round((S34 / I + dan * (a[34][10]-a[34][0]) * a[34][9] - dan * a[34][12])*0.75 + (S35 / I + dan * (a[35][10]-a[35][0]) * a[35][9] - dan * a[35][12])*0.25 + 1 * (a[34][9] * (a[34][10] - a[34][0])), 0)

Anyao[0] = round((S36 / I + dan * (a[36][10]-a[36][0]) * a[36][9] - dan * a[36][12])*(1 - math.floor((situation * 1.65 + jj * 2) / 9) * 7 / 120) + (S37 / I + dan * (a[37][10]-a[37][0]) * a[37][9] - dan * a[37][12]) * math.floor((situation * 1.65 + jj * 2) / 9) * 7 / 120, 0)
Anyao[7] = round((dan * (a[36][10]-a[36][0]) * a[36][9] - dan * a[36][12])*(1 - math.floor((situation * 1.65 + jj * 2) / 9) * 7 / 120) + (dan * (a[37][10]-a[37][0]) * a[37][9] - dan * a[37][12]) * math.floor((situation * 1.65 + jj * 2) / 9) * 7 / 120, 1)
Anyao[8] = Anyao[0] + 23

Zhuxing[0] = round(S38 / I + dan * (a[38][10]-a[38][0]) * a[38][9] - dan * a[38][12], 0)
Zhuxing[7] = round(dan * (a[38][10]-a[38][0]) * a[38][9] - dan * a[38][12], 1)
Zhuxing[8] = Zhuxing[0]

Tianchuang[0] = round(S39 / I + dan * (a[39][10]-a[39][0]) * a[39][9] - dan * a[39][12], 0)
Tianchuang[7] = round(dan * (a[39][10]-a[39][0]) * a[39][9] - dan * a[39][12], 1)
Tianchuang[8] = Tianchuang[0]

Laosi[0] = round(S40 / I + dan * (a[40][10]-a[40][0]) * a[40][9] - dan * a[40][12], 0)
Laosi[7] = round(dan * (a[40][10]-a[40][0]) * a[40][9] - dan * a[40][12], 1)
Laosi[8] = Laosi[0]

Jianbing[0] = round(0.75 * (S41 / I + dan * (a[41][10]-a[41][0]) * a[41][9] - dan * a[41][12]) + 0.25 * (S42 / I + dan * (a[42][10]-a[42][0]) * a[42][9] - dan * a[42][12]), 0)
Jianbing[7] = round(0.75 * (dan * (a[41][10]-a[41][0]) * a[41][9] - dan * a[41][12]) + 0.25 * (dan * (a[42][10]-a[42][0]) * a[42][9] - dan * a[42][12]), 1)
Jianbing[8] = Jianbing[0]

Benlei[0] = round(S43 / I + dan * (a[43][10]-a[43][0]) * a[43][9] - dan * a[43][12], 0)
Benlei[7] = round(dan * (a[43][10]-a[43][0]) * a[43][9] - dan * a[43][12], 1)
Benlei[8] = Benlei[0]

Liedi[0] = round(0.35 * (S44 / I + dan * (a[44][10]-a[44][0]) * a[44][9] - dan * a[44][12]) + 0.65 * (S45 / I + dan * (a[45][10]-a[45][0]) * a[45][9] - dan * a[45][12]), 0)
Liedi[7] = round(0.35 * (dan * (a[44][10]-a[44][0]) * a[44][9] - dan * a[44][12]) + 0.65 * (dan * (a[45][10]-a[45][0]) * a[45][9] - dan * a[45][12]), 1)
Liedi[8] = Liedi[0]

Yuyan[0] = round(S46 / I + dan * (a[46][10]-a[46][0]) * a[46][9] - dan * a[46][12], 0)
Yuyan[5] = round(1, 2)
Yuyan[6] = round(1 * (a[46][9] * (a[46][10] - a[46][0])), 2)
Yuyan[7] = round(dan * (a[46][10]-a[46][0]) * a[46][9] - dan * a[46][12], 1)
Yuyan[8] = round(S46 / I + dan * (a[46][10]-a[46][0]) * a[46][9] - dan * a[46][12] + 1 * (a[46][9] * (a[46][10] - a[46][0])), 0)

Xinshou[0] = round(S47 / I + dan * (a[47][10]-a[47][0]) * a[47][9] - dan * a[47][12], 0)
Xinshou[7] = round(dan * (a[47][10]-a[47][0]) * a[47][9] - dan * a[47][12], 1)
Xinshou[8] = Xinshou[0]

zhihui[0] = round(S48 / I + dan * (a[48][10]-a[48][0]) * a[48][9] - dan * a[48][12], 0)
zhihui[5] = round(1, 2)
zhihui[6] = round(1 * (a[48][9] * (a[48][10] - a[48][0])), 2)
zhihui[7] = round(dan * (a[48][10]-a[48][0]) * a[48][9] - dan * a[48][12], 1)
zhihui[8] = round(S48 / I + dan * (a[48][10]-a[48][0]) * a[48][9] - dan * a[48][12] + (a[48][9] * (a[48][10] - a[48][0])), 0)

shitian[0] = round(S49 / I + dan * (a[49][10]-a[49][0]) * a[49][9] - dan * a[49][12], 0)
shitian[7] = round(dan * (a[49][10]-a[49][0]) * a[49][9] - dan * a[49][12], 1)
shitian[8] = shitian[0]

huangjin[0] = round(S50 / I + dan * (a[50][10]-a[50][0]) * a[50][9] - dan * a[50][12] + dan * 0.75*3*6/3.6, 0)
huangjin[7] = round(dan * (a[50][10]-a[50][0]) * a[50][9] - dan * a[50][12] + dan * 0.75*3*6/3.6, 1)
huangjin[8] = huangjin[0]

tianxing[0] = round(S51 / I + dan * (a[51][8]-a[51][0]) * a[51][9] - dan * a[51][12], 0)
tianxing[5] = 4/5
tianxing[6] = round(4/5 * (a[51][9] * (a[51][8] - a[51][0])), 2)
tianxing[7] = round(dan * (a[51][8]-a[51][0]) * a[51][9] - dan * a[51][12], 1)
tianxing[8] = round(S51 / I + dan * (a[51][8]-a[51][0]) * a[51][9] - dan * a[51][12] + 4/5 * (a[51][9] * (a[51][8] - a[51][0])), 0)

kexing[0] = 0.458*round(S52 / I + dan * (a[52][10]-a[52][0]) * a[52][9] - dan * a[52][12], 0) + 0.542*round(S53 / I + dan * (a[53][10]-a[53][0]) * a[53][9] - dan * a[53][12], 0)
kexing[7] = 0.458*round(dan * (a[52][10]-a[52][0]) * a[52][9] - dan * a[52][12], 1) + 0.542*round(dan * (a[53][10]-a[53][0]) * a[53][9] - dan * a[53][12], 1)
kexing[8] = kexing[0]

yuanji[0] = round(S54 / I + dan * (a[54][10]-a[54][0]) * a[54][9] - dan * a[54][12], 0)
yuanji[7] = round(dan * (a[54][10]-a[54][0]) * a[54][9] - dan * a[54][12], 1)
yuanji[8] = yuanji[0]

kaidi[0] = round(S55 / I + dan * (a[55][10]-a[55][0]) * a[55][9] - dan * a[55][12], 0)
kaidi[7] = round(dan * (a[55][10]-a[55][0]) * a[55][9] - dan * a[55][12], 1)
kaidi[8] = kaidi[0]

pili[0] = round(S56 / I + dan * (a[56][10]-a[56][0]) * a[56][9] - dan * a[56][12], 0)
pili[1] = 6
pili[2] = round(pili[1] * (a[56][1] - a[56][0]) * a[56][5], 1)
pili[7] = round(dan * (a[56][10]-a[56][0]) * a[56][9] - dan * a[56][12], 1)
pili[8] = pili[0] + pili[2]

chuangshi[0] = 0.5*round(S57 / I + dan * (a[57][10]-a[57][0]) * a[57][9] - dan * a[57][12], 0)+0.5*round(S58 / I + dan * (a[58][10]-a[58][0]) * a[58][9] - dan * a[58][12], 0)
chuangshi[7] = 0.5*round(dan * (a[57][10]-a[57][0]) * a[57][9] - dan * a[57][12], 1)+0.5*round(dan * (a[58][10]-a[58][0]) * a[58][9] - dan * a[58][12], 1)
chuangshi[8] = chuangshi[0]

bingpo[0] = round(S59 / I + dan * (a[59][10]-a[59][0]) * a[59][9] - dan * a[59][12], 0)
bingpo[1] = 3
bingpo[2] = round(bingpo[1] * (a[59][1] - a[59][0]) * a[59][5], 1)
bingpo[7] = round(dan * (a[59][10]-a[59][0]) * a[59][9] - dan * a[59][12], 1)
bingpo[8] = bingpo[0] + bingpo[2]

fengxian[0] = 0.75*round(S60 / I + dan * (a[60][10]-a[60][0]) * a[60][9] - dan * a[60][12], 0)+0.25*round(S61 / I + dan * (a[61][10]-a[61][0]) * a[61][9] - dan * a[61][12], 0)
fengxian[7] = 0.75*round(dan * (a[60][10]-a[60][0]) * a[60][9] - dan * a[60][12], 1)+0.25*round(dan * (a[61][10]-a[61][0]) * a[61][9] - dan * a[61][12], 1)
fengxian[8] = fengxian[0]

xianjian[0] = round(S62 / I + (jj + situation * (0.41 - 0.085) / 1.2 * 0.5) * 0.5 * 6 / 120 * 3 * a[62][9] * 5 + dan * (a[62][10]-a[62][0]) * a[62][9] - dan * a[62][12] + situation * (0.41 - 0.085) / 1.2 * 0.12 * (a[62][1] - a[62][0]), 0)
xianjian[7] = round(dan * (a[62][10]-a[62][0]) * a[62][9] - dan * a[62][12], 1)
xianjian[8] = xianjian[0]

lanbo[0] = round(S63 / I + dan * (a[63][10]-a[63][0]) * a[63][9] - dan * a[63][12], 0)
lanbo[7] = round(dan * (a[63][10]-a[63][0]) * a[63][9] - dan * a[63][12], 1)
lanbo[8] = lanbo[0]

binfen[0] = round(S64 / I + dan * (a[64][10]-a[64][0]) * a[64][9] - dan * a[64][12], 0)
binfen[7] = round(dan * (a[64][10]-a[64][0]) * a[64][9] - dan * a[64][12], 1)
binfen[8] = binfen[0]

shenying[0] = round(S65 / I + dan * (a[65][10]-a[65][0]) * a[65][9] - dan * a[65][12], 0)
shenying[7] = round(dan * (a[65][10]-a[65][0]) * a[65][9] - dan * a[65][12], 1)
shenying[8] = shenying[0]

ala[0] = 0.52*round(S66 / I + dan * (a[66][10]-a[66][0]) * a[66][9] - dan * a[66][12], 0)+0.48*round(S67 / I + dan * (a[67][10]-a[67][0]) * a[67][9] - dan * a[67][12], 0)
ala[7] = 0.52*round(dan * (a[66][10]-a[66][0]) * a[66][9] - dan * a[66][12], 1)+0.48*round(dan * (a[67][10]-a[67][0]) * a[67][9] - dan * a[67][12], 1)
ala[8] = ala[0]

xulie[0] = round(S68 / I + dan * (a[68][10]-a[68][0]) * a[68][9] - dan * a[68][12], 0)
xulie[7] = round(dan * (a[68][10]-a[68][0]) * a[68][9] - dan * a[68][12], 1)
xulie[8] = xulie[0]

binghu[0] = 0.75*round(S69 / I + dan * (a[69][10]-a[69][0]) * a[69][9] - dan * a[69][12], 0) + 0.25*round(S70 / I + dan * (a[70][10]-a[70][0]) * a[70][9] - dan * a[70][12], 0)
binghu[7] = 0.75*round(dan * (a[69][10]-a[69][0]) * a[69][9] - dan * a[69][12], 1) + 0.25*round(dan * (a[70][10]-a[70][0]) * a[70][9] - dan * a[70][12], 1)
binghu[8] = binghu[0]

yanjun[0] = 0.75*round(S71 / I + dan * (a[71][10]-a[71][0]) * a[71][9] - dan * a[71][12], 0) + 0.25*round(S72 / I + dan * (a[72][10]-a[72][0]) * a[72][9] - dan * a[72][12], 0)
yanjun[1] = 1
yanjun[2] = round(yanjun[1] * (a[71][1] - a[71][0]) * a[71][5], 1)
yanjun[7] = 0.75*round(dan * (a[71][10]-a[71][0]) * a[71][9] - dan * a[71][12], 1) + 0.25*round(dan * (a[72][10]-a[72][0]) * a[72][9] - dan * a[72][12], 1)
yanjun[8] = yanjun[0] + yanjun[2]

sunwukong[0] = (1 - math.floor((situation * 1.65 + jj * 2) / 9) * 9 / 120) * round(S73 / I + dan * (a[73][10]-a[73][0]) * a[73][9] - dan * a[73][12], 0) + (math.floor((situation * 1.65 + jj * 2) / 9) * 9 / 120) * round(S74 / I + dan * (a[74][10]-a[74][0]) * a[74][9] - dan * a[74][12], 0) + 8 * 9 / 3.6
sunwukong[7] = (1 - math.floor((situation * 1.65 + jj * 2) / 9) * 9 / 120) * round(dan * (a[73][10]-a[73][0]) * a[73][9] - dan * a[73][12], 1) + (math.floor((situation * 1.65 + jj * 2) / 9) * 9 / 120) * round(dan * (a[74][10]-a[74][0]) * a[74][9] - dan * a[74][12], 1)
sunwukong[8] = sunwukong[0]

r_luanyu = jj * 1.5 / (situation * 1.65 + jj * 2)
print(r_luanyu)
luanyu[0] = (1-r_luanyu)*round(S75 / I + dan * (a[75][10]-a[75][0]) * a[75][9] - dan * a[75][12], 0) + r_luanyu*round(S76 / I + dan * (a[76][10]-a[76][0]) * a[76][9] - dan * a[76][12], 0)
luanyu[2] = round(1.7 * (a[75][1] - a[75][0]) * situation * 0.3 * 0.62, 1)
luanyu[7] = (1-r_luanyu)*round(dan * (a[75][10]-a[75][0]) * a[75][9] - dan * a[75][12], 1) + r_luanyu*round(dan * (a[76][10]-a[76][0]) * a[76][9] - dan * a[76][12], 1)
luanyu[8] = luanyu[0] + luanyu[2]

aolina[0] = round(S77 / I + dan * (a[77][10]-a[77][0]) * a[77][9] - dan * a[77][12], 0)
aolina[7] = round(dan * (a[77][10]-a[77][0]) * a[77][9] - dan * a[77][12], 1)
aolina[8] = aolina[0]

yutu[0] = round(S78 / I + dan * (a[78][10]-a[78][0]) * a[78][9] - dan * a[78][12], 0)
yutu[7] = round(dan * (a[78][10]-a[78][0]) * a[78][9] - dan * a[78][12], 1)
yutu[8] = yutu[0]

xuanyue[0] = round(S79 / I + dan * (a[79][10]-a[79][0]) * a[79][9] - dan * a[79][12], 0)
xuanyue[1] = 6
xuanyue[2] = round(xuanyue[1] * (a[79][1] - a[79][0]) * a[79][5], 1)
xuanyue[7] = round(dan * (a[79][10]-a[79][0]) * a[79][9] - dan * a[79][12], 1)
xuanyue[8] = xuanyue[0] + xuanyue[2]

bailang[0] = round(S80 / I + dan * (a[80][10]-a[80][0]) * a[80][9] - dan * a[80][12], 0)
bailang[1] = 3
bailang[2] = round(bailang[1] * (a[80][1] - a[80][0]) * a[80][5], 1)
bailang[7] = round(dan * (a[80][10]-a[80][0]) * a[80][9] - dan * a[80][12], 1)
bailang[8] = bailang[0] + bailang[2]


table = pd.DataFrame([], columns=['无特性里程', '小喷数', '小喷对应里程', '导弹数', '导弹对应里程', '氮气数', '氮气特性里程', '氮气拾取里程', '总里程'])
table.loc['星海幻翼'] = Huangbai
table.loc['破风'] = Pofeng
table.loc['裁决者'] = Caijuezhe
table.loc['双生战神'] = Shuangsheng
table.loc['亚洲荣耀'] = Yazhou
table.loc['赛博战士'] = Saibo
table.loc['赤魂幽灵'] = Chihun
table.loc['御炎神兵'] = Yuyan
table.loc['骑士精神'] = Qishi
table.loc['天狼星'] = Tianlang
table.loc['劲霸'] = Jingba
table.loc['神风玉堂'] = Shenfeng
table.loc['裂地玄甲'] = Liedi
table.loc['星空猎手'] = Xingkong
table.loc['极夜幽冥'] = Jiye
table.loc['地狱天启'] = Diyutianqi
table.loc['暗耀武神'] = Anyao
table.loc['火神'] = Huoshen
table.loc['逐星者'] = Zhuxing
table.loc['永夜君主'] = Yongye
table.loc['冰皇'] = Binghuang
table.loc['奔雷圣卫'] = Benlei
table.loc['迅捷流星'] = Xunjie
table.loc['天蓬'] = Tianpeng
table.loc['银河之光'] = Yinghe
table.loc['苍穹绝影'] = Cangqiong
table.loc['尖兵阿尔法'] = Jianbing
table.loc['零改破风'] = Pofeng0
table.loc['黑金'] = Heijin
table.loc['天创武士'] = Tianchuang
table.loc['劳斯莱斯QEX'] = Laosi
table.loc['惊鸿'] = Jinghong
table.loc['S-追光者'] = Zhuiguang
table.loc['时之夭'] = Shizhiyao
table.loc['新手赛车'] = Xinshou
table.loc['智慧女神'] = zhihui
table.loc['黄金射手座'] = huangjin
table.loc['噬天饕餮'] = shitian
table.loc['天行者'] = tianxing
table.loc['柯星出击'] = kexing
table.loc['源极之星EAX'] = yuanji
table.loc['凯蒂雷诺'] = kaidi
table.loc['霹雳战驱'] = pili
table.loc['创世噬神'] = chuangshi
table.loc['冰魄'] = bingpo
table.loc['吕布·奉先'] = fengxian
table.loc['天蜀仙剑'] = xianjian
table.loc['兰博基尼'] = lanbo
table.loc['缤纷神驹'] = binfen
table.loc['神影'] = shenying
table.loc['阿斯拉达'] = ala
table.loc['序列未来'] = xulie
table.loc['冰虎'] = binghu
table.loc['炎君'] = yanjun
table.loc['孙悟空'] = sunwukong
table.loc['鸾羽'] = luanyu
table.loc['奥莉娜'] = aolina
table.loc['玉兔雷诺'] = yutu
table.loc['玄月'] = xuanyue
table.loc['白狼'] = bailang

print(table)
table.to_excel('xxx')

end = time.time()
print("运行时间:%.2f秒"%(end-start))